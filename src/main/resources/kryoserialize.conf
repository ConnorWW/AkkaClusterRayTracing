akka {
  actor {
    provider = cluster
    serializers {
      kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
    }
    serialization-bindings {
      "acrt.cluster.untyped.Backend$MakeManager" = kryo
      "acrt.cluster.untyped.Frontend$Start$" = kryo
      "acrt.cluster.untyped.Frontend$BackendRegistration$" = kryo
      "acrt.cluster.untyped.GeometryCreator" = kryo
      "acrt.cluster.untyped.GeometryManager$FindPath" = kryo
      "acrt.cluster.untyped.GeometryManager$CastRay" = kryo
      "acrt.cluster.untyped.GeometryManager$OrganizerRegistration$" = kryo
      "acrt.cluster.untyped.GeometryOrganizerAll$TestSerialize" = kryo
      "acrt.cluster.untyped.GeometryOrganizerAll$ReceiveDone" = kryo
      "acrt.cluster.untyped.GeometryOrganizerAll$CastRay" = kryo
      "acrt.cluster.untyped.GeometryOrganizerAll$RecID" = kryo
      "acrt.cluster.untyped.GeometryOrganizerAll$ManagerRegistration" = kryo
      "acrt.cluster.untyped.GeometryOrganizerAll$BackendRegistration" = kryo
      "acrt.cluster.untyped.ImageDrawer$Start" = kryo
      "acrt.cluster.untyped.ImageDrawer$SetColor" = kryo
      "acrt.cluster.untyped.Intersector$CastRay" = kryo
      "acrt.cluster.untyped.IntersectContainer" = kryo
      "acrt.cluster.untyped.PixelHandler$AddRay" = kryo
      "acrt.cluster.untyped.PixelHandler$SetColor" = kryo
      "acrt.cluster.untyped.PixelHandler$IntersectResult" = kryo
    }
  }

  remote {
    artery {
      canonical.hostname = "127.0.0.1"
      canonical.port = 25251
      advanced.outbound-message-queue-size = 10000000
    }
  }
  cluster {
    jmx.multi-mbeans-in-same-jvm = on
    seed-nodes = [
      "akka://ClusterSystem@pandora02:25251",
      "akka://ClusterSystem@pandora03:25251"]
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }
}
