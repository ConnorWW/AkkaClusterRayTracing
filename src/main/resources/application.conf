akka {
  actor {
    provider = cluster
    allow-java-serialization = on
    warn-about-java-serializer-usage = off
    serializers {
      java = "akka.serialization.JavaSerializer"
      kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
    }
    serialization-bindings {
      "acrt.cluster.untyped.CborSerializable" = jackson-cbor
      "acrt.cluster.untyped.KryoSerializable" = kryo
      "acrt.cluster.untyped.GeometryCreator" = kryo
      "acrt.cluster.untyped.GeometryManager.FindPath" = kryo
      "acrt.cluster.untyped.GeometryManager.CastRay" = kryo
      "acrt.cluster.untyped.GeometryManager.BackendRegistration" = kryo
      "acrt.cluster.untyped.GeometryOrganizerAll.ReceiveDone" = kryo
      "acrt.cluster.untyped.GeometryOrganizerAll.CastRay" = kryo
      "acrt.cluster.untyped.GeometryOrganizerAll.RecID" = kryo
      "acrt.cluster.untyped.GeometryOrganizerAll.ManagerRegistration" = kryo
      "acrt.cluster.untyped.ImageDrawer.Start" = kryo
      "acrt.cluster.untyped.ImageDrawer.SetColor" = kryo
      "acrt.cluster.untyped.Intersector.CastRay" = kryo
      "acrt.cluster.untyped.PixelHandler.AddRay" = kryo
      "acrt.cluster.untyped.PixelHandler.SetColor" = kryo
      "acrt.cluster.untyped.PixelHandler.IntersectResult" = kryo
      }
  }
  remote {
    artery {
      canonical.hostname = "127.0.0.1"
      canonical.port = 25251
      advanced.outbound-message-queue-size = 2000000
    }
  }
  cluster {
    jmx.multi-mbeans-in-same-jvm = on
    seed-nodes = [
      "akka://ClusterSystem@pandora02:25251",
      "akka://ClusterSystem@pandora03:25251"]
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }
}

